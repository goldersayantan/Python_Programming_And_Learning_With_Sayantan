"""
Conditional Statements in Python: if-elif-else
Conditional statements in Python allow you to execute specific blocks of code based on certain conditions.
The most common conditional structures are the if, elif, and else statements.

Syntax:

if condition1:
    # Code to execute if condition1 is True
elif condition2:
    # Code to execute if condition2 is True
else:
    # Code to execute if all the above conditions are False

"""

# Examples:
# Basic if - elif - else Example:
x = 15

if x > 20:
    print("x is greater than 20")
elif x > 10:
    print("x is greater than 10 but less than or equal to 20")
else:
    print("x is 10 or less")    # Output: x is greater than 10 but less than or equal to 20


# if Without elif or else:
x = 5
if x > 0:
    print("x is positive")    # Output: x is positive


# Multiple elif Conditions:
score = 85
if score >= 90:
    print("Grade: A")
elif score >= 80:
    print("Grade: B")
elif score >= 70:
    print("Grade: C")
else:
    print("Grade: F")    # Output: Grade: B


# Nested if Statements:
x = 20
y = 15

if x > 10:
    if y > 10:
        print("Both x and y are greater than 10")
    else:
        print("x is greater than 10, but y is not")    # Output: Both x and y are greater than 10


# Using Logical Operators in Conditions:
# You can combine multiple conditions using logical operators (and, or, not).
age = 25
income = 30000

if age > 18 and income > 25000:
    print("Eligible for loan")
else:
    print("Not eligible for loan")      # Output: Eligible for loan


# Ternary Conditional Expression (Short if-else):
# Python allows a shorthand for if-else using the ternary operator.
x = 10
result = "Even" if x % 2 == 0 else "Odd"
print(result)    # Output: Even


"""
for Loop in Python
The for loop in Python is used to iterate over a sequence (such as a list, tuple, dictionary, string, or range) and 
execute a block of code for each item in that sequence.

Syntax:

for variable in sequence:
    # Code block to execute for each item

# variable: A temporary variable that holds the current item from the sequence during each iteration.
# sequence: The iterable object being looped through.
"""

# Examples of for Loops
# Iterating Through a List
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)    # Output: apple banana cherry  (They all will be in single line.)

# Iterating Through a String
text = "hello"
for char in text:
    print(char)    # Output: h e l l o  (They all will be in single line.)

# Using range() in a for Loop
# The range() function generates a sequence of numbers.
for i in range(5):
    print(i)    # 0 1 2 3 4

# By default, range(start, stop) starts from 0 and goes up to (but does not include) stop.

# You can also specify a step:
for i in range(1, 10, 2):  # Start at 1, go up to 10, increment by 2
    print(i)    # Output: 1 3 5 7 9

# Iterating Through a Dictionary
# You can iterate through a dictionary's keys, values, or both.
student = {'name': 'Alice', 'age': 25, 'grade': 'A'}

# Iterating through keys
for key in student:
    print(key)

# Iterating through values
for value in student.values():
    print(value)

# Iterating through key-value pairs
for key, value in student.items():
    print(f"{key}: {value}")


# Nested for Loops
# You can use one for loop inside another to handle nested data structures.
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

for row in matrix:
    for element in row:
        print(element, end=" ")
    print()  # Newline after each row

# It will print the whole matrix

# for Loop with else
# The else block in a for loop executes after the loop finishes iterating over the sequence,
# provided the loop was not terminated with a break.
for i in range(5):
    print(i)
else:
    print("Loop completed")    # Output: 0 1 2 3 4 Loop completed

# Breaking Out of a for Loop
# You can use break to terminate the loop prematurely.
for i in range(10):
    if i == 5:
        break
    print(i)    # Output: 0 1 2 3 4

# Skipping Iterations with continue
# You can use continue to skip the rest of the loop body for the current iteration and move to the next.
for i in range(5):
    if i == 2:
        continue
    print(i)    # Output: 0 1 3 4

# Using pass in a for Loop
# The pass statement does nothing and is often used as a placeholder.
for i in range(5):
    if i == 3:
        pass  # Placeholder for future code
    print(i)    # Output: 0 1 2 3 4


"""
range() Function in Python
The range() function in Python generates a sequence of numbers. It is widely used in for loops to iterate over a specific range of values. 
The numbers generated by range() do not include the upper limit (it is exclusive).

Syntax:

range(start, stop, step)

start (optional): The number at which the sequence begins (default is 0).
stop: The number at which the sequence ends (exclusive).
step (optional): The difference between each number in the sequence (default is 1).
"""

# Examples
# Basic range() with One Argument (stop)
for i in range(5):
    print(i)    # Output: 0 1 2 3 4

# range() with Two Arguments (start, stop)
for i in range(2, 6):
    print(i)    # Output:  2 3 4 5

# Starts at 2.
# Stops before 6.

# range() with Three Arguments (start, stop, step)
for i in range(1, 10, 2):
    print(i)    # Output: 1 3 5 7 9

# Negative Step (Reversing the Range)
for i in range(10, 0, -2):
    print(i)    # Output: 10 8 6 4 2

# Starts at 10.
# Decrements by 2 (negative step size).
# Stops before 0.

# Using range() with an Empty Sequence
# If start is greater than or equal to stop with a positive step, or if start is less than or equal to stop with a negative step, range() generates an empty sequence.
for i in range(5, 2):
    print(i)  # No output (empty range)

# Converting range to a List
# The range() object is an iterable, but it is not a list. You can convert it to a list using the list() function.
numbers = list(range(5))
print(numbers)  # Output: [0, 1, 2, 3, 4]


"""
while Loop in Python
The while loop in Python repeatedly executes a block of code as long as a specified condition evaluates to True. 
It is used when the number of iterations is not known beforehand and depends on a condition.

Syntax

while condition:
    # Code block to execute

condition: A Boolean expression that determines whether the loop should continue running. If the condition becomes False, the loop stops.
Code block: The indented statements executed repeatedly as long as the condition is True
"""

# Examples of while Loops
# Basic Example
count = 1
while count <= 5:
    print(f"Count: {count}")
    count += 1

# Infinite Loop
"""
while True:
    print("This will run forever")
    
To run it, take out the code of the string.    
"""

# Using break to Exit a while Loop
# You can use the break statement to terminate the loop prematurely.
count = 1
while count <= 10:
    if count == 5:
        break
    print(f"Count: {count}")
    count += 1

# Skipping Iterations with continue
count = 0
while count < 5:
    count += 1
    if count == 3:
        continue
    print(f"Count: {count}")    # Output: Count: 1 Count: 2 Count: 4 Count: 5

# while Loop with else
count = 1
while count <= 3:
    print(f"Count: {count}")
    count += 1
else:
    print("Loop finished")

# Common Use Cases of while Loops
# Repeating Until User Input is Correct
password = "secret"
user_input = ""

while user_input != password:
    user_input = input("Enter the password: ")
    if user_input == password:
        print("Access granted")
    else:
        print("Wrong password, try again")

# Generating a Fibonacci Sequence
a, b = 0, 1
while b < 50:
    print(b, end=" ")
    a, b = b, a + b    # Output: 1 1 2 3 5 8 13 21 34


